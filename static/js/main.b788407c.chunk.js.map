{"version":3,"sources":["web3.js","lottery.js","App.js","reportWebVitals.js","index.js"],"names":["window","ethereum","request","method","web3","Web3","lot","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","getAccounts","accounts","setState","methods","enter","send","from","utils","toWei","onClick","pickWinner","console","log","call","getPlayers","getBalance","options","address","this","length","fromWei","onChange","target","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b788407c.chunk.js","sourcesContent":["import Web3 from \"web3\";\nwindow.ethereum.request({ method: \"eth_requestAccounts\" });\n\nconst web3 = new Web3(window.ethereum);\n\nexport default web3;\n","import web3 from './web3';\n\nconst address = '0x5D74dB5c5D5fc847026947d9c52D32c72E66B020';\nconst abi = [{\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"enter\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"getPlayers\",\n        \"outputs\": [{\n            \"internalType\": \"address payable[]\",\n            \"name\": \"\",\n            \"type\": \"address[]\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"manager\",\n        \"outputs\": [{\n            \"internalType\": \"address\",\n            \"name\": \"\",\n            \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"pickWinner\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [{\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n        }],\n        \"name\": \"players\",\n        \"outputs\": [{\n            \"internalType\": \"address payable\",\n            \"name\": \"\",\n            \"type\": \"address\"\n        }],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n\nconst lot = new web3.eth.Contract(abi, address);\nexport default lot;","import React from \"react\";\nimport web3 from \"./web3\";\nimport lot from \"./lottery\";\n\nclass App extends React.Component {\n  state = {\n    manager: \"\",\n    players: [],\n    balance: \"\",\n    value: \"\",\n    message: \"\",\n  };\n  async componentDidMount() {\n    const accounts = await web3.eth.getAccounts();\n    console.log(`accounts[0]`, accounts[0]);\n\n    const manager = await lot.methods.manager().call({from : accounts[0]});\n    //console.log(manager);\n\n    const players = await lot.methods.getPlayers().call({\n      from: accounts[0],\n    });\n    //console.log(players);\n\n    const balance = await web3.eth.getBalance(lot.options.address);\n    //console.log(balance);\n\n    this.setState({ manager , players , balance });\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: \"Waiting on transaction success...\" });\n\n    await lot.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, \"ether\"),\n    });\n\n    this.setState({ message: \"You have been entered!\" });\n  };\n\n  onClick = async () => {\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({ message: \"Waiting on transaction success...\" });\n\n    await lot.methods.pickWinner().send({\n      from: accounts[0],\n    });\n\n    this.setState({ message: \"A winner has been picked!\" });\n  };\n\n   render() {\n  //   console.log(this.state.players);\n  //   console.log(this.state.manager);\n  //   console.log(this.state.balance);\n    return (\n      <div>\n        <h2> Lottery Contract </h2>{\" \"}\n        <p>\n          This contract is managed by {this.state.manager}.There are currently{\" \"}\n          {this.state.players.length}\n          people entered, competing to win{\" \"}\n          {web3.utils.fromWei(this.state.balance, \"ether\")}\n          ether!\n        </p>\n        <hr />\n        <form onSubmit={this.onSubmit}>\n          <h4> Want to try your luck ? </h4>{\" \"}\n          <div>\n            <label> Amount of ether to enter </label>{\" \"}\n            <input\n              value={this.state.value}\n              onChange={(event) => this.setState({ value: event.target.value })}\n            />{\" \"}\n          </div>{\" \"}\n          <button> Enter </button>{\" \"}\n        </form>\n        <hr />\n        <h4> Ready to pick a winner ? </h4>{\" \"}\n        <button onClick={this.onClick}> Pick a winner! </button>\n        <hr />\n        <h1> {this.state.message} </h1>{\" \"}\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}